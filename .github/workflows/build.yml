name: Build Archea

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            artifact_name: archea-windows
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            artifact_name: archea-linux
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y libglew-dev libglfw3-dev libglm-dev

      - name: Setup vcpkg (Windows)
        if: matrix.os == 'windows-latest'
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: 'f2e1c41da38c71be74ef48684666991929b45418'

      - name: Install Windows dependencies
        if: matrix.os == 'windows-latest'
        run: |
          vcpkg install glew glfw3 glm --triplet x64-windows

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          ${{ matrix.os == 'windows-latest' && '-DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake' || '' }}
          -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Create artifact directory
        run: |
          mkdir -p artifact

      - name: Copy build artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cp ${{ steps.strings.outputs.build-output-dir }}/archea artifact/
          # Copy shaders directory from build (generated by CMake)
          if [ -d "${{ steps.strings.outputs.build-output-dir }}/shaders" ]; then cp -r ${{ steps.strings.outputs.build-output-dir }}/shaders artifact/; fi
          # Copy any other resources if they exist
          if [ -d "${{ steps.strings.outputs.build-output-dir }}/fonts" ]; then cp -r ${{ steps.strings.outputs.build-output-dir }}/fonts artifact/; fi
          if [ -d "${{ steps.strings.outputs.build-output-dir }}/sprites" ]; then cp -r ${{ steps.strings.outputs.build-output-dir }}/sprites artifact/; fi

      - name: Copy build artifacts (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Copy-Item "${{ steps.strings.outputs.build-output-dir }}/Release/archea.exe" "artifact/" -ErrorAction SilentlyContinue
          Copy-Item "${{ steps.strings.outputs.build-output-dir }}/archea.exe" "artifact/" -ErrorAction SilentlyContinue
          # Copy shaders directory from build (generated by CMake)
          if (Test-Path "${{ steps.strings.outputs.build-output-dir }}/shaders") { Copy-Item -Path "${{ steps.strings.outputs.build-output-dir }}/shaders" -Destination "artifact/" -Recurse }
          # Copy any other resources if they exist
          if (Test-Path "${{ steps.strings.outputs.build-output-dir }}/fonts") { Copy-Item -Path "${{ steps.strings.outputs.build-output-dir }}/fonts" -Destination "artifact/" -Recurse }
          if (Test-Path "${{ steps.strings.outputs.build-output-dir }}/sprites") { Copy-Item -Path "${{ steps.strings.outputs.build-output-dir }}/sprites" -Destination "artifact/" -Recurse }
        shell: powershell

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: artifact/
          retention-days: 30

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: archea-linux
          path: ./linux-build

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: archea-windows
          path: ./windows-build

      - name: Create release archives
        run: |
          cd linux-build && tar -czf ../archea-linux.tar.gz * && cd ..
          cd windows-build && zip -r ../archea-windows.zip * && cd ..

      - name: Upload combined artifacts
        uses: actions/upload-artifact@v4
        with:
          name: archea-all-platforms
          path: |
            archea-linux.tar.gz
            archea-windows.zip
          retention-days: 30
