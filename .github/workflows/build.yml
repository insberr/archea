name: Build Archea

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact_name: archea-linux
            build_type: Release
          - os: windows-latest
            artifact_name: archea-windows
            build_type: Release

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup C++ environment
        uses: aminya/setup-cpp@v1
        with:
          compiler: gcc
          cmake: 3.28
          ninja: true

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y libglew-dev libglfw3-dev libglm-dev

      - name: Setup vcpkg (Windows)
        if: matrix.os == 'windows-latest'
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: '8eb57355a4ffb410a2e94c07b4dca2dffbee8e50'

      - name: Install Windows dependencies
        if: matrix.os == 'windows-latest'
        run: |
          vcpkg install glew glfw3 glm --triplet x64-windows

      - name: Configure CMake (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -G Ninja

      - name: Configure CMake (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake -G Ninja

      - name: Build
        run: cmake --build build --config ${{ matrix.build_type }}

      - name: Create artifact directory
        run: |
          mkdir -p artifact

      - name: Copy build artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cp build/archea artifact/
          # Copy shaders directory from build (generated by CMake)
          if [ -d "build/shaders" ]; then cp -r build/shaders artifact/; fi
          # Copy any other resources if they exist
          if [ -d "resources" ]; then cp -r resources artifact/; fi
          if [ -d "assets" ]; then cp -r assets artifact/; fi

      - name: Copy build artifacts (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Copy-Item "build/archea.exe" "artifact/"
          # Copy shaders directory from build (generated by CMake)
          if (Test-Path "build/shaders") { Copy-Item -Path "build/shaders" -Destination "artifact/" -Recurse }
          # Copy any other resources if they exist
          if (Test-Path "resources") { Copy-Item -Path "resources" -Destination "artifact/" -Recurse }
          if (Test-Path "assets") { Copy-Item -Path "assets" -Destination "artifact/" -Recurse }
        shell: powershell

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: artifact/
          retention-days: 30

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: archea-linux
          path: ./linux-build

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: archea-windows
          path: ./windows-build

      - name: Create release archives
        run: |
          cd linux-build && tar -czf ../archea-linux.tar.gz * && cd ..
          cd windows-build && zip -r ../archea-windows.zip * && cd ..

      - name: Upload combined artifacts
        uses: actions/upload-artifact@v4
        with:
          name: archea-all-platforms
          path: |
            archea-linux.tar.gz
            archea-windows.zip
          retention-days: 30
